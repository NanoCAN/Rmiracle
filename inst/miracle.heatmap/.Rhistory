# Version info: R 2.14.1, Biobase 2.15.3, GEOquery 2.23.2, limma 3.10.1
# R scripts generated  Tue Feb 25 09:46:11 EST 2014
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE27027", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL10192", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
sml <- c("X","G0","G1","G0","G2","G1","X","X","G2","G1","G0","X");
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G2-G0, G1-G0, G2-G1, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","GB_ACC"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE27027", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL10192", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
sml <- c("X","G0","G1","G0","G2","G1","X","X","G2","G1","G0","X")
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("fMASC","fSTR","aMASC")
# set parameters and draw the plot
palette(c("#f4dfdf","#dfeaf4","#dfeaf4", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE27027", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
library(org.Hs.eg.db)
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G2-G0, G1-G0, G2-G1, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","GB_ACC"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
gset()
gset
varLabels(gset)
fvarLabels(gset)
install.packages("NCBI2R")
library(NCBI2R)
GetGeneNames("BC101944")
GetGeneNames("BC023693")
?GetIDs
GetIDs("BC023693")
GetIDs("BC023693", org="mouse")
GetGeneNames(GetIDs("BC023693", org="mouse"))
sapply(tT[,"ID"], GetGeneNames(GetIDs("BC023693", org="mouse")))
sapply(tT[,"ID"], function(x){GetGeneNames(GetIDs(x, org="mouse")))
sapply(tT[,"ID"], function(x){GetGeneNames(GetIDs(x, org="mouse"))})
tT[,"ID"]
as.character(tT[,"ID"])
sapply(as.character(tT[,"ID"]), function(x){GetGeneNames(GetIDs(x, org="mouse"))})
sapply(as.character(tT[,"ID"]), function(x){try(GetGeneNames(GetIDs(x, org="mouse")))})
source("http://bioconductor.org/biocLite.R")
biocLite("Mus.musculus")
library(Mus.musculus)
x <- org.Mm.egACCNUM
xx <- as.list(org.Mm.egACCNUM2EG)
xx[tT[,1]]
as.vector(xx[tT[,1]])
unlist(xx[tT[,1]])
tT$EG <- unlist(xx[tT[,1]])
View(unlist(xx[tT[,1]]))
row.names(unlist(xx[tT[,1]]))
names(unlist(xx[tT[,1]]))
unique(names(unlist(xx[tT[,1]])))
tT[,1]
xx[tT[,1]]
length(xx[tT[,1]])
unlist((xx[tT[,1]]))
length(unlist((xx[tT[,1]])))
xx[tT[,1]]
View(xx[tT[,1]])
tT$EG <- xx[tT[,1]]
tT$EG
tT
View(tT)
exprs
as.data.frame(exprs)
toTable(exprs)
?exprs
exprs(gset)
tT["NC_000076"]
tT["NC_000076.6"]
tT["NC_000076",]
tT["NC_000076.6",]
xx[row.names(exprs(gset))]
tT["X59060",]
tT["AK029370",]
head(tT)
tT["NM_008657.2",]
tT["NM_008657",]
tT["BC025654",]
exprs(gset)["NM_008657",]
exprs(gset)["X59060",]
exprs(gset)
exprs(gset)["AK029370",]
exprs(gset)["AK004638",]
exprs(gset)["AK029370",]
exprs(gset)["AK29370",]
exprs(gset)["X59060",]
exprs(gset)["NM_008657.2",]
egenes <- xx[row.names(exprs(gset))]
View(egenes)
?seq_along
seq_along(egenes)[sapply(egenes, function(x){"17878" %in% x})]
egenes[33978,]
egenes[33978]
egenes[seq_along(egenes)[sapply(egenes, function(x){"17878" %in% x})]]
names(egenes[seq_along(egenes)[sapply(egenes, function(x){"17878" %in% x})]])
myf6.locus <- names(egenes[seq_along(egenes)[sapply(egenes, function(x){"17878" %in% x})]])
myf6.expression <- egenes[myf6.locus,]
myf6.expression <- exprs(gset)[myf6.locus,]
myf6.expression
colnames(myf6.expression) <- c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC")
names(myf6.expression) <- c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC")
myf6.expression
library(ggplot2)
qplot(myf6.expression, geom="bar")
qplot(x=names(myf6.expression), y=myf6.expression, data=myf6.expression, geom="bar")
melt(myf6.expression)
myf6.expression <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), exprs=myf6.expression)
myf6.expression
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="identity")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="identity") + geom_error()
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="box", stat="identity")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="boxplot")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", position"dodge")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", position="dodge")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", position="dodge", stat="identity")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", position="dodge", stat="mean")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="summarize", fun.y="mean")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="summarise", fun.y="mean")
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="sum", fun.y="mean")
?qplot
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="summary", fun.y="mean")
elf5.locus <- names(egenes[seq_along(egenes)[sapply(egenes, function(x){"13711" %in% x})]])
elf5.locus
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.df
melt(exprs.df)
sample.class=cbind(c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), colnames(exprs(gset))
)
sample.class
merge(exprs,df,sample.class, by=2)
?merge
merge(exprs,df,sample.class, by.x=2, by.y=2)
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
exprs.df <- melt(exprs(gset)[c(myf6.locus, elf5.locus),])
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class=data.frame=(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
?rep
rep("ELF5", 4)
exprs.df$gene <- c("MYF6", rep("ELF5", 4))
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.df$gene <- c("MYF6", rep("ELF5", 4))
exprs.df
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.df
c("MYF6", rep("ELF5", 4))
exprs.df$gene <- c("MYF6", rep("ELF5", 4))
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.df[,"gene"] <- c("MYF6", rep("ELF5", 4))
cbind(exprs.df, c("MYF6", rep("ELF5", 4)))
cbind(exprs.df, gene=c("MYF6", rep("ELF5", 4)))
exprs.df <- cbind(exprs.df, gene=c("MYF6", rep("ELF5", 4)))
melt(exprs.df)
melt(exprs.df, id.vars="gene")
library(reshape2)
melt(exprs.df, id.vars="gene")
?melt
melt(exprs.df, variable.name="gene")
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.df
exrs.genes <- cbind(row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4)))
exrs.genes
exprs.genes <- cbind(row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4)))
exprs.genes <- cbind(locus=row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4)))
exprs.genes
melt(exprs.df, id.vars="gene")
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
exprs.df <- melt(exprs.df, id.vars="gene")
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.genes <- cbind(Locus=row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4)))
exprs.df <- merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.df <- merge(exprs.df, exprs.genes, all.x=T, by="Locus")
exprs.df
exprs.gene
exprs.genes
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus),]
exprs.genes <- cbind(Locus=row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4)))
exprs.df <- melt(exprs.df, id.vars="gene")
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
exprs.df <- merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.df <- merge(exprs.df, exprs.genes, all.x=T, by="Locus")
exprs.df
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="summary", fill="Locus" fun.y="mean") + facet_wrap(~gene)
qplot(x=sample.class, y=exprs, data=myf6.expression, geom="bar", stat="summary", fill=Locus, fun.y="mean") + facet_wrap(~gene)
qplot(x=Locus, y=exprs, data=myf6.expression, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class)
qplot(x=Locus, y=exprs, data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class)
qplot(x=Locus, y=exprs, data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + opts(axis.text.x=theme_text(angle=45, hjust=1)))
qplot(x=Locus, y=exprs, data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + opts(axis.text.x=theme_text(angle=45, hjust=1))
qplot(x=Locus, y=exprs, data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1))
qplot(x=Locus, y=log2(exprs), data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1))
sox2.locus <- names(egenes[seq_along(egenes)[sapply(egenes, function(x){"20674" %in% x})]])
sox2.locus
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus, sox2.locus),]
exprs.genes <- cbind(Locus=row.names(exprs.df), gene=c("MYF6", rep("ELF5", 4), "SOX2"))
exprs.df <- melt(exprs.df, id.vars="gene")
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
exprs.df <- merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.df <- merge(exprs.df, exprs.genes, all.x=T, by="Locus")
library(ggplot2)
qplot(x=Locus, y=log2(exprs), data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1))
myc.locus <- names(egenes[seq_along(egenes)[sapply(egenes, function(x){"17869" %in% x})]])
myc.locus
exprs.df <- exprs(gset)[c(myf6.locus, elf5.locus, sox2.locus, myc.locus),]
exprs.genes <- cbind(Locus=row.names(exprs.df), gene=c("Myf6", rep("Elf5", 4), "Sox2", "Myc"))
exprs.df <- melt(exprs.df, id.vars="gene")
colnames(exprs.df) <- c("Locus", "GSM", "exprs")
sample.class <- data.frame(sample.class=c("fMASC","fSTR","fMASC","aMASC","fSTR","aMASC","fSTR","fMASC"), GSM=colnames(exprs(gset)))
exprs.df <- merge(exprs.df, sample.class, all.x=T, all.y=F, by="GSM")
exprs.df <- merge(exprs.df, exprs.genes, all.x=T, by="Locus")
library(ggplot2)
qplot(x=Locus, y=log2(exprs), data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1))
qplot(x=Locus, y=log2(exprs), data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1)) + scale_y_continuous(breaks=seq(0,10))
qplot(x=Locus, y=log2(exprs), data=exprs.df, geom="bar", stat="summary", fill=gene, fun.y="mean") + facet_wrap(~sample.class) + theme(axis.text.x=element_text(angle=45, hjust=1)) + scale_y_continuous(breaks=seq(0,16))
library(Rmiracle)
setwd("/media/sf_Projects/shiny/heatmap.shiny")
runApp(".")
library(shiny)
runApp(".")
setwd("/media/sf_Projects/R/Rmiracle/share/shiny/miracle.heatmap")
runApp(".", port=5619)
runApp(".", port=5620)
runApp(".", port=5619)
library(shiny)
runApp(".", port=5619)
devtools::install_github("shiny", "rstudio")
runApp(".", port=5619)
runApp("../single.analysis.shiny/", port=5619)
runApp("../single.analysis.shiny/", port=5618)
